{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenB",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "provider",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidityMinted",
						"type": "uint256"
					}
				],
				"name": "InitialLiquidityAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "provider",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidityMinted",
						"type": "uint256"
					}
				],
				"name": "LiquidityAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "provider",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidityBurned",
						"type": "uint256"
					}
				],
				"name": "LiquidityRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "swapper",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "tokenIn",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "tokenOut",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"name": "TokensSwapped",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amountADesired",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountBDesired",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountAMin",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountBMin",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "addLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "liquidity",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "reserveIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "reserveOut",
						"type": "uint256"
					}
				],
				"name": "getAmountOut",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB_",
						"type": "address"
					}
				],
				"name": "getPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "liquidity",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountAMin",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountBMin",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "reserveA",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "reserveB",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountOutMin",
						"type": "uint256"
					},
					{
						"internalType": "address[]",
						"name": "path",
						"type": "address[]"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "swapExactTokensForTokens",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenA",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenB",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Pablo Gianferro",
			"details": "This contract handles tokenA and tokenB liquidity pools and manages internal LP tokens.      LP tokens are not ERC20-compatible but are tracked via internal mappings.",
			"events": {
				"InitialLiquidityAdded(address,uint256,uint256,uint256)": {
					"params": {
						"amountA": "Amount of token A added",
						"amountB": "Amount of token B added",
						"liquidityMinted": "Amount of LP tokens minted",
						"provider": "Address of the liquidity provider"
					}
				},
				"LiquidityAdded(address,uint256,uint256,uint256)": {
					"params": {
						"amountA": "Amount of token A added",
						"amountB": "Amount of token B added",
						"liquidityMinted": "Amount of LP tokens minted",
						"provider": "Address of the liquidity provider"
					}
				},
				"LiquidityRemoved(address,uint256,uint256,uint256)": {
					"params": {
						"amountA": "Amount of token A returned",
						"amountB": "Amount of token B returned",
						"liquidityBurned": "Amount of LP tokens burned",
						"provider": "Address of the liquidity provider"
					}
				},
				"TokensSwapped(address,address,uint256,address,uint256)": {
					"params": {
						"amountIn": "Amount of token sent",
						"amountOut": "Amount of token received",
						"swapper": "Address performing the swap",
						"tokenIn": "Address of the token sent in",
						"tokenOut": "Address of the token received"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
					"params": {
						"amountADesired": "Amount of token A to add",
						"amountAMin": "Minimum accepted amount of token A",
						"amountBDesired": "Amount of token B to add",
						"amountBMin": "Minimum accepted amount of token B",
						"deadline": "Transaction expiry timestamp",
						"to": "Address to receive LP tokens",
						"tokenA_": "address of tokenA",
						"tokenB_": "address of tokenB"
					},
					"returns": {
						"amountA": "Final amount of token A added",
						"amountB": "Final amount of token B added",
						"liquidity": "Amount of LP tokens minted"
					}
				},
				"constructor": {
					"params": {
						"_tokenA": "Address of token A",
						"_tokenB": "Address of token B"
					}
				},
				"getAmountOut(uint256,uint256,uint256)": {
					"params": {
						"amountIn": ": Amount of input tokens.",
						"reserveIn": ", reserveOut: Current reserves in the contract."
					},
					"returns": {
						"amountOut": ": Amount of tokens to receive."
					}
				},
				"getPrice(address,address)": {
					"params": {
						"tokenA_": "Address of the first ERC20 token to calculate a price for.",
						"tokenB_": "Address of the second ERC20 token to calculate a price for."
					},
					"returns": {
						"price": "Price of tokenA in terms of tokenB"
					}
				},
				"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
					"params": {
						"amountAMin": "Minimum accepted amount of token A",
						"amountBMin": "Minimum accepted amount of token B",
						"deadline": "Transaction expiry timestamp",
						"liquidity": "amount of LP tokens to burn",
						"to": "Address to receive tokens",
						"tokenA_": "address of tokenA",
						"tokenB_": "address of tokenB"
					},
					"returns": {
						"amountA": "Final amount of token A added",
						"amountB": "Final amount of token B added"
					}
				},
				"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
					"params": {
						"amountIn": "Amount of input tokens.",
						"amountOutMin": ": Minimum acceptable number of output tokens.",
						"deadline": ": Timestamp for the transaction.",
						"path": ": Array of token addresses. (input token, output token)",
						"to": ": Recipient address."
					},
					"returns": {
						"amounts": ": Array with input and output amounts."
					}
				}
			},
			"title": "SimpleSwap",
			"version": 1
		},
		"userdoc": {
			"events": {
				"InitialLiquidityAdded(address,uint256,uint256,uint256)": {
					"notice": "Emitted when INITIAL liquidity is added to the pool"
				},
				"LiquidityAdded(address,uint256,uint256,uint256)": {
					"notice": "Emitted when liquidity is added to the pool"
				},
				"LiquidityRemoved(address,uint256,uint256,uint256)": {
					"notice": "Emitted when liquidity is removed from the pool"
				},
				"TokensSwapped(address,address,uint256,address,uint256)": {
					"notice": "Emitted when a token swap is performed"
				}
			},
			"kind": "user",
			"methods": {
				"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
					"notice": "Adds liquidity to the pool and mints LP tokens"
				},
				"constructor": {
					"notice": "Initializes the contract with the two token addresses"
				},
				"decimals()": {
					"notice": "Returns the number of decimals used for the LP token"
				},
				"getAmountOut(uint256,uint256,uint256)": {
					"notice": "Calculates how many tokens will be received when exchanging"
				},
				"getPrice(address,address)": {
					"notice": "Gets the price of one token in terms of another."
				},
				"name()": {
					"notice": "Returns the name of the LP token"
				},
				"owner()": {
					"notice": "owner Address of the provider of LP tokens (initialized by the contract)"
				},
				"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
					"notice": "Removes liquidity from the pool and burns LP tokens"
				},
				"reserveA()": {
					"notice": "Current reserve of token A held by the pool"
				},
				"reserveB()": {
					"notice": "Current reserve of token B held by the pool"
				},
				"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
					"notice": "Exchanges one token for another in the exact amount."
				},
				"symbol()": {
					"notice": "Returns the symbol of the LP token"
				},
				"tokenA()": {
					"notice": "Address of token A"
				},
				"tokenB()": {
					"notice": "Address of token B"
				}
			},
			"notice": "ETHKIPU TP MODULE 3: A simplified implementation of a Uniswap-like liquidity pool for two ERC20 tokens.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"SimpleSwap_flattened.sol": "SimpleSwap"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"SimpleSwap_flattened.sol": {
			"keccak256": "0x79ab6295677045c93e6e57b93fa7716fcd0293864d88bf1bb3929baae29251ce",
			"license": "MIT",
			"urls": [
				"bzz-raw://1f7c761d0855afa49c34478c2c0840442e85b96a442ac135d0e864bf02bce4fb",
				"dweb:/ipfs/QmUhJuev6YUnj5j7YkdBLmRNkrC1UoWcdiQdsxC49q2H9u"
			]
		}
	},
	"version": 1
}